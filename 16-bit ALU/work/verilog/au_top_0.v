/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [15:0] M_temp_a_d, M_temp_a_q = 1'h0;
  reg [15:0] M_temp_b_d, M_temp_b_q = 1'h0;
  reg [29:0] M_timera_d, M_timera_q = 1'h0;
  reg [29:0] M_timerb_d, M_timerb_q = 1'h0;
  reg [29:0] M_timer_d, M_timer_q = 1'h0;
  localparam SELECT_state = 5'd0;
  localparam MANUAL_state = 5'd1;
  localparam TESTADD_state = 5'd2;
  localparam TESTSUB1_state = 5'd3;
  localparam TESTSUB2_state = 5'd4;
  localparam TESTOVERFLOW1_state = 5'd5;
  localparam TESTOVERFLOW2_state = 5'd6;
  localparam TESTOVERFLOW3_state = 5'd7;
  localparam TESTAND_state = 5'd8;
  localparam TESTOR_state = 5'd9;
  localparam TESTXOR_state = 5'd10;
  localparam TESTA_state = 5'd11;
  localparam TESTSHL1_state = 5'd12;
  localparam TESTSHL2_state = 5'd13;
  localparam TESTSHR1_state = 5'd14;
  localparam TESTSHR2_state = 5'd15;
  localparam TESTSRA1_state = 5'd16;
  localparam TESTSRA2_state = 5'd17;
  localparam TESTCMPEQ1_state = 5'd18;
  localparam TESTCMPEQ2_state = 5'd19;
  localparam TESTCMPLT1_state = 5'd20;
  localparam TESTCMPLT2_state = 5'd21;
  localparam TESTCMPLT3_state = 5'd22;
  localparam TESTCMPLT4_state = 5'd23;
  localparam TESTCMPLE1_state = 5'd24;
  localparam TESTCMPLE2_state = 5'd25;
  localparam TESTCMPLE3_state = 5'd26;
  localparam TESTCMPLE4_state = 5'd27;
  localparam TESTCMPLE5_state = 5'd28;
  localparam TESTMULT_state = 5'd29;
  
  reg [4:0] M_state_d, M_state_q = SELECT_state;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [20-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  reg [15:0] a;
  
  reg [15:0] b;
  
  reg [15:0] alu;
  
  wire [1-1:0] M_alu_comp_z;
  wire [1-1:0] M_alu_comp_v;
  wire [1-1:0] M_alu_comp_n;
  wire [16-1:0] M_alu_comp_alu;
  reg [6-1:0] M_alu_comp_alufn;
  reg [16-1:0] M_alu_comp_a;
  reg [16-1:0] M_alu_comp_b;
  alu_3 alu_comp (
    .alufn(M_alu_comp_alufn),
    .a(M_alu_comp_a),
    .b(M_alu_comp_b),
    .z(M_alu_comp_z),
    .v(M_alu_comp_v),
    .n(M_alu_comp_n),
    .alu(M_alu_comp_alu)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_timera_d = M_timera_q;
    M_timerb_d = M_timerb_q;
    M_timer_d = M_timer_q;
    M_temp_a_d = M_temp_a_q;
    M_temp_b_d = M_temp_b_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_seg_values[15+4-:5] = 4'h0;
    M_seg_values[10+4-:5] = 4'h0;
    M_seg_values[5+4-:5] = 4'h0;
    M_seg_values[0+4-:5] = 4'h0;
    io_sel = 4'hf;
    M_alu_comp_alufn = 6'h00;
    M_alu_comp_a = 16'h0000;
    M_alu_comp_b = 16'h0000;
    
    case (M_state_q)
      SELECT_state: begin
        M_seg_values[15+4-:5] = 3'h5;
        M_seg_values[10+4-:5] = 4'he;
        M_seg_values[5+4-:5] = 4'hd;
        M_seg_values[0+4-:5] = 5'h1f;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (io_dip[0+0+0-:1]) begin
          if (io_button[1+0-:1]) begin
            M_state_d = TESTADD_state;
          end
        end else begin
          if (io_button[1+0-:1]) begin
            M_state_d = MANUAL_state;
          end
        end
      end
      MANUAL_state: begin
        M_seg_values[15+4-:5] = 5'h1e;
        M_seg_values[10+4-:5] = 5'h1e;
        M_seg_values[5+4-:5] = 5'h1e;
        M_seg_values[0+4-:5] = 5'h1e;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (io_dip[0+1+0-:1]) begin
          a[0+7-:8] = io_dip[8+7-:8];
          a[8+7-:8] = io_dip[16+7-:8];
          if (io_button[1+0-:1]) begin
            M_temp_a_d = a;
          end
        end else begin
          b[0+7-:8] = io_dip[8+7-:8];
          b[8+7-:8] = io_dip[16+7-:8];
          if (io_button[1+0-:1]) begin
            M_temp_b_d = b;
          end
        end
        if (io_button[0+0-:1]) begin
          M_temp_a_d = 1'h0;
          M_temp_b_d = 1'h0;
        end
        M_alu_comp_alufn = io_dip[0+2+5-:6];
        M_alu_comp_a = M_temp_a_q;
        M_alu_comp_b = M_temp_b_q;
        io_led[8+7-:8] = M_alu_comp_alu[0+7-:8];
        io_led[16+7-:8] = M_alu_comp_alu[8+7-:8];
        io_led[0+0+0-:1] = M_alu_comp_z;
        io_led[0+1+0-:1] = M_alu_comp_v;
        io_led[0+2+0-:1] = M_alu_comp_n;
        if (io_button[2+0-:1]) begin
          M_state_d = SELECT_state;
        end
      end
      TESTADD_state: begin
        M_alu_comp_alufn = 6'h00;
        a = 16'h57aa;
        M_alu_comp_a = a;
        b = 16'h2124;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 4'ha;
          M_seg_values[10+4-:5] = 4'hb;
          M_seg_values[5+4-:5] = 4'hb;
          M_seg_values[0+4-:5] = 5'h1f;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 4'ha;
          M_seg_values[10+4-:5] = 4'hb;
          M_seg_values[5+4-:5] = 4'hb;
          M_seg_values[0+4-:5] = 5'h1f;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 1'h1;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu == 16'h78ce) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTSUB1_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTSUB1_state: begin
        M_alu_comp_alufn = 6'h01;
        a = 16'hc030;
        M_alu_comp_a = a;
        b = 16'h0c8b;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 3'h5;
          M_seg_values[10+4-:5] = 4'hf;
          M_seg_values[5+4-:5] = 5'h10;
          M_seg_values[0+4-:5] = 1'h1;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 3'h5;
          M_seg_values[10+4-:5] = 4'hf;
          M_seg_values[5+4-:5] = 5'h10;
          M_seg_values[0+4-:5] = 1'h1;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 1'h1;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu == 16'hb3a5 & M_alu_comp_n == 1'h1) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTSUB2_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTSUB2_state: begin
        M_alu_comp_alufn = 6'h01;
        a = 16'hfffd;
        M_alu_comp_a = a;
        b = 16'h0007;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 3'h5;
          M_seg_values[10+4-:5] = 4'hf;
          M_seg_values[5+4-:5] = 5'h10;
          M_seg_values[0+4-:5] = 2'h2;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 3'h5;
          M_seg_values[10+4-:5] = 4'hf;
          M_seg_values[5+4-:5] = 5'h10;
          M_seg_values[0+4-:5] = 2'h2;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 1'h1;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu == 16'hfff6 & M_alu_comp_n == 1'h1) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTOVERFLOW1_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTOVERFLOW1_state: begin
        M_alu_comp_alufn = 6'h00;
        a = 16'h7fff;
        M_alu_comp_a = a;
        b = 16'h7fff;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 4'hc;
          M_seg_values[10+4-:5] = 4'hd;
          M_seg_values[5+4-:5] = 1'h0;
          M_seg_values[0+4-:5] = 1'h1;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 4'hc;
          M_seg_values[10+4-:5] = 4'hd;
          M_seg_values[5+4-:5] = 1'h0;
          M_seg_values[0+4-:5] = 1'h1;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 1'h1;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu == 16'hfffe & M_alu_comp_n == 1'h1 & M_alu_comp_v == 1'h1) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTOVERFLOW2_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTOVERFLOW2_state: begin
        M_alu_comp_alufn = 6'h01;
        a = 16'h61a8;
        M_alu_comp_a = a;
        b = 16'hc180;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 4'hc;
          M_seg_values[10+4-:5] = 4'hd;
          M_seg_values[5+4-:5] = 1'h0;
          M_seg_values[0+4-:5] = 2'h2;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 4'hc;
          M_seg_values[10+4-:5] = 4'hd;
          M_seg_values[5+4-:5] = 1'h0;
          M_seg_values[0+4-:5] = 2'h2;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 1'h1;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu == 16'ha028 & M_alu_comp_n == 1'h1 & M_alu_comp_v == 1'h1) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTOVERFLOW3_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTOVERFLOW3_state: begin
        M_alu_comp_alufn = 6'h00;
        a = 16'h9e58;
        M_alu_comp_a = a;
        b = 16'hc180;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 4'hc;
          M_seg_values[10+4-:5] = 4'hd;
          M_seg_values[5+4-:5] = 1'h0;
          M_seg_values[0+4-:5] = 2'h3;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 4'hc;
          M_seg_values[10+4-:5] = 4'hd;
          M_seg_values[5+4-:5] = 1'h0;
          M_seg_values[0+4-:5] = 2'h3;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 1'h1;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu == 16'h5fd8 & M_alu_comp_v == 1'h1) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTAND_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTAND_state: begin
        M_alu_comp_alufn = 6'h18;
        a = 16'h0fa1;
        M_alu_comp_a = a;
        b = 16'h9f08;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 4'ha;
          M_seg_values[10+4-:5] = 5'h12;
          M_seg_values[5+4-:5] = 4'hb;
          M_seg_values[0+4-:5] = 5'h1f;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 4'ha;
          M_seg_values[10+4-:5] = 5'h12;
          M_seg_values[5+4-:5] = 4'hb;
          M_seg_values[0+4-:5] = 5'h1f;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 10'h3e9;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu == 16'h0f00) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTOR_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTOR_state: begin
        M_alu_comp_alufn = 6'h1e;
        a = 16'h0fa1;
        M_alu_comp_a = a;
        b = 16'h9f08;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 1'h0;
          M_seg_values[10+4-:5] = 5'h13;
          M_seg_values[5+4-:5] = 5'h1f;
          M_seg_values[0+4-:5] = 5'h1f;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 1'h0;
          M_seg_values[10+4-:5] = 5'h13;
          M_seg_values[5+4-:5] = 5'h1f;
          M_seg_values[0+4-:5] = 5'h1f;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 1'h1;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu == 16'h9fa9) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTXOR_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTXOR_state: begin
        M_alu_comp_alufn = 6'h16;
        a = 16'h0fa1;
        M_alu_comp_a = a;
        b = 16'h9f08;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h1e;
          M_seg_values[10+4-:5] = 1'h0;
          M_seg_values[5+4-:5] = 5'h13;
          M_seg_values[0+4-:5] = 5'h1f;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h1e;
          M_seg_values[10+4-:5] = 1'h0;
          M_seg_values[5+4-:5] = 5'h13;
          M_seg_values[0+4-:5] = 5'h1f;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 1'h1;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu == 16'h90a9) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTA_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTA_state: begin
        M_alu_comp_alufn = 6'h1a;
        a = 16'h0fa1;
        M_alu_comp_a = a;
        b = 16'h9f08;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 4'ha;
          M_seg_values[10+4-:5] = 5'h1f;
          M_seg_values[5+4-:5] = 5'h1f;
          M_seg_values[0+4-:5] = 5'h1f;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 4'ha;
          M_seg_values[10+4-:5] = 5'h1f;
          M_seg_values[5+4-:5] = 5'h1f;
          M_seg_values[0+4-:5] = 5'h1f;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 1'h1;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu == 16'h0fa1) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTSHL1_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTSHL1_state: begin
        M_alu_comp_alufn = 6'h20;
        a = 16'h1842;
        M_alu_comp_a = a;
        b = 16'h0023;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 3'h5;
          M_seg_values[10+4-:5] = 5'h14;
          M_seg_values[5+4-:5] = 4'hd;
          M_seg_values[0+4-:5] = 1'h1;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 3'h5;
          M_seg_values[10+4-:5] = 5'h14;
          M_seg_values[5+4-:5] = 4'hd;
          M_seg_values[0+4-:5] = 1'h1;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 1'h1;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu == 16'hc210) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTSHL2_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTSHL2_state: begin
        M_alu_comp_alufn = 6'h20;
        a = 16'h486c;
        M_alu_comp_a = a;
        b = 16'h0004;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 3'h5;
          M_seg_values[10+4-:5] = 5'h14;
          M_seg_values[5+4-:5] = 4'hd;
          M_seg_values[0+4-:5] = 2'h2;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 3'h5;
          M_seg_values[10+4-:5] = 5'h14;
          M_seg_values[5+4-:5] = 4'hd;
          M_seg_values[0+4-:5] = 2'h2;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 1'h1;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu == 16'h86c0) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTSHR1_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTSHR1_state: begin
        M_alu_comp_alufn = 6'h21;
        a = 16'h6cf0;
        M_alu_comp_a = a;
        b = 16'h0006;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 3'h5;
          M_seg_values[10+4-:5] = 5'h14;
          M_seg_values[5+4-:5] = 5'h13;
          M_seg_values[0+4-:5] = 1'h1;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 3'h5;
          M_seg_values[10+4-:5] = 5'h14;
          M_seg_values[5+4-:5] = 5'h13;
          M_seg_values[0+4-:5] = 1'h1;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 16'h8000;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu == 16'h01b3) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTSHR2_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTSHR2_state: begin
        M_alu_comp_alufn = 6'h21;
        a = 16'h94e2;
        M_alu_comp_a = a;
        b = 16'h000f;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 3'h5;
          M_seg_values[10+4-:5] = 5'h14;
          M_seg_values[5+4-:5] = 5'h13;
          M_seg_values[0+4-:5] = 2'h2;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 3'h5;
          M_seg_values[10+4-:5] = 5'h14;
          M_seg_values[5+4-:5] = 5'h13;
          M_seg_values[0+4-:5] = 2'h2;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 16'h8000;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu == 16'h0001) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTSRA1_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTSRA1_state: begin
        M_alu_comp_alufn = 6'h23;
        a = 16'hc861;
        M_alu_comp_a = a;
        b = 16'h000c;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 3'h5;
          M_seg_values[10+4-:5] = 5'h13;
          M_seg_values[5+4-:5] = 4'ha;
          M_seg_values[0+4-:5] = 1'h1;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 3'h5;
          M_seg_values[10+4-:5] = 5'h13;
          M_seg_values[5+4-:5] = 4'ha;
          M_seg_values[0+4-:5] = 1'h1;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 16'h8000;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu == 16'hfffc) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTSRA2_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTSRA2_state: begin
        M_alu_comp_alufn = 6'h23;
        a = 16'h4861;
        M_alu_comp_a = a;
        b = 16'h000c;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 3'h5;
          M_seg_values[10+4-:5] = 5'h13;
          M_seg_values[5+4-:5] = 4'ha;
          M_seg_values[0+4-:5] = 2'h2;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 3'h5;
          M_seg_values[10+4-:5] = 5'h13;
          M_seg_values[5+4-:5] = 4'ha;
          M_seg_values[0+4-:5] = 2'h2;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 16'h8000;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu == 16'h0004) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTCMPEQ1_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTCMPEQ1_state: begin
        M_alu_comp_alufn = 6'h33;
        a = 16'h98b8;
        M_alu_comp_a = a;
        b = 16'h98b8;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 5'h11;
          M_seg_values[5+4-:5] = 4'he;
          M_seg_values[0+4-:5] = 1'h1;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 5'h11;
          M_seg_values[5+4-:5] = 4'he;
          M_seg_values[0+4-:5] = 1'h1;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 10'h3e9;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu[0+0-:1] == 1'h1 & M_alu_comp_z == 1'h1 & M_alu_comp_v == 1'h0 & M_alu_comp_n == 1'h0) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTCMPEQ2_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTCMPEQ2_state: begin
        M_alu_comp_alufn = 6'h33;
        a = 16'h0035;
        M_alu_comp_a = a;
        b = 16'h0006;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 5'h11;
          M_seg_values[5+4-:5] = 4'he;
          M_seg_values[0+4-:5] = 2'h2;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 5'h11;
          M_seg_values[5+4-:5] = 4'he;
          M_seg_values[0+4-:5] = 2'h2;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 16'h8000;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu[0+0-:1] == 1'h0 & M_alu_comp_z == 1'h0 & M_alu_comp_v == 1'h0 & M_alu_comp_n == 1'h0) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTCMPLT1_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTCMPLT1_state: begin
        M_alu_comp_alufn = 6'h35;
        a = 16'h4127;
        M_alu_comp_a = a;
        b = 16'h0fc9;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 5'h11;
          M_seg_values[5+4-:5] = 4'hd;
          M_seg_values[0+4-:5] = 1'h1;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 5'h11;
          M_seg_values[5+4-:5] = 4'hd;
          M_seg_values[0+4-:5] = 1'h1;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 16'h8000;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu[0+0-:1] == 1'h0 & M_alu_comp_z == 1'h0 & M_alu_comp_v == 1'h0 & M_alu_comp_n == 1'h0) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTCMPLT2_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTCMPLT2_state: begin
        M_alu_comp_alufn = 6'h35;
        a = 16'h8000;
        M_alu_comp_a = a;
        b = 16'h0124;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 5'h11;
          M_seg_values[5+4-:5] = 4'hd;
          M_seg_values[0+4-:5] = 2'h2;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 5'h11;
          M_seg_values[5+4-:5] = 4'hd;
          M_seg_values[0+4-:5] = 2'h2;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 10'h3e9;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu[0+0-:1] == 1'h1 & M_alu_comp_z == 1'h0 & M_alu_comp_v == 1'h1 & M_alu_comp_n == 1'h0) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTCMPLT3_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTCMPLT3_state: begin
        M_alu_comp_alufn = 6'h35;
        a = 16'h8000;
        M_alu_comp_a = a;
        b = 16'hf124;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 5'h11;
          M_seg_values[5+4-:5] = 4'hd;
          M_seg_values[0+4-:5] = 2'h3;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 5'h11;
          M_seg_values[5+4-:5] = 4'hd;
          M_seg_values[0+4-:5] = 2'h3;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 16'h8000;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu[0+0-:1] == 1'h1 & M_alu_comp_z == 1'h0 & M_alu_comp_v == 1'h0 & M_alu_comp_n == 1'h1) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTCMPLT4_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTCMPLT4_state: begin
        M_alu_comp_alufn = 6'h35;
        a = 16'h7fff;
        M_alu_comp_a = a;
        b = 16'h8fc9;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 5'h11;
          M_seg_values[5+4-:5] = 4'hd;
          M_seg_values[0+4-:5] = 3'h4;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 5'h11;
          M_seg_values[5+4-:5] = 4'hd;
          M_seg_values[0+4-:5] = 3'h4;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 10'h3e9;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu[0+0-:1] == 1'h0 & M_alu_comp_z == 1'h0 & M_alu_comp_v == 1'h1 & M_alu_comp_n == 1'h1) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTCMPLE1_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTCMPLE1_state: begin
        M_alu_comp_alufn = 6'h37;
        a = 16'hf127;
        M_alu_comp_a = a;
        b = 16'h8fc9;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 4'hd;
          M_seg_values[5+4-:5] = 4'he;
          M_seg_values[0+4-:5] = 1'h1;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 4'hd;
          M_seg_values[5+4-:5] = 4'he;
          M_seg_values[0+4-:5] = 1'h1;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 16'h8000;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu[0+0-:1] == 1'h0 & M_alu_comp_z == 1'h0 & M_alu_comp_v == 1'h0 & M_alu_comp_n == 1'h0) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTCMPLE2_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTCMPLE2_state: begin
        M_alu_comp_alufn = 6'h37;
        a = 16'h7fff;
        M_alu_comp_a = a;
        b = 16'h8fc9;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 4'hd;
          M_seg_values[5+4-:5] = 4'he;
          M_seg_values[0+4-:5] = 2'h2;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 4'hd;
          M_seg_values[5+4-:5] = 4'he;
          M_seg_values[0+4-:5] = 2'h2;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 10'h3e9;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu[0+0-:1] == 1'h0 & M_alu_comp_z == 1'h0 & M_alu_comp_v == 1'h1 & M_alu_comp_n == 1'h1) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTCMPLE3_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTCMPLE3_state: begin
        M_alu_comp_alufn = 6'h37;
        a = 16'h1248;
        M_alu_comp_a = a;
        b = 16'h1248;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 4'hd;
          M_seg_values[5+4-:5] = 4'he;
          M_seg_values[0+4-:5] = 2'h3;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 4'hd;
          M_seg_values[5+4-:5] = 4'he;
          M_seg_values[0+4-:5] = 2'h3;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 10'h3e9;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu[0+0-:1] == 1'h1 & M_alu_comp_z == 1'h1 & M_alu_comp_v == 1'h0 & M_alu_comp_n == 1'h0) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTCMPLE4_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTCMPLE4_state: begin
        M_alu_comp_alufn = 6'h37;
        a = 16'h8000;
        M_alu_comp_a = a;
        b = 16'hf124;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 4'hd;
          M_seg_values[5+4-:5] = 4'he;
          M_seg_values[0+4-:5] = 3'h4;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 4'hd;
          M_seg_values[5+4-:5] = 4'he;
          M_seg_values[0+4-:5] = 3'h4;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 16'h8000;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu[0+0-:1] == 1'h1 & M_alu_comp_z == 1'h0 & M_alu_comp_v == 1'h0 & M_alu_comp_n == 1'h1) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTCMPLE5_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTCMPLE5_state: begin
        M_alu_comp_alufn = 6'h37;
        a = 16'h8000;
        M_alu_comp_a = a;
        b = 16'h0124;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 4'hd;
          M_seg_values[5+4-:5] = 4'he;
          M_seg_values[0+4-:5] = 3'h5;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h15;
          M_seg_values[10+4-:5] = 4'hd;
          M_seg_values[5+4-:5] = 4'he;
          M_seg_values[0+4-:5] = 3'h5;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 10'h3e9;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu[0+0-:1] == 1'h1 & M_alu_comp_z == 1'h0 & M_alu_comp_v == 1'h1 & M_alu_comp_n == 1'h0) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = TESTMULT_state;
        end
        if (io_button[2+0-:1]) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
      TESTMULT_state: begin
        M_alu_comp_alufn = 6'h02;
        a = 16'h00a6;
        M_alu_comp_a = a;
        b = 16'h0016;
        M_alu_comp_b = b;
        alu = M_alu_comp_alu;
        if (M_timera_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h1;
          io_led[8+7-:8] = b[0+7-:8];
          io_led[16+7-:8] = b[8+7-:8];
          M_timerb_d = M_timerb_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h16;
          M_seg_values[10+4-:5] = 5'h16;
          M_seg_values[5+4-:5] = 5'h17;
          M_seg_values[0+4-:5] = 4'hd;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          io_led[0+6+0-:1] = 1'h1;
          io_led[8+7-:8] = a[0+7-:8];
          io_led[16+7-:8] = a[8+7-:8];
          M_timera_d = M_timera_q + 1'h1;
          M_seg_values[15+4-:5] = 5'h16;
          M_seg_values[10+4-:5] = 5'h16;
          M_seg_values[5+4-:5] = 5'h17;
          M_seg_values[0+4-:5] = 4'hd;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        if (M_timerb_q[27+0-:1]) begin
          io_led[0+7+0-:1] = 1'h0;
          M_timer_d = M_timer_q + 1'h1;
          if (io_dip[0+7+0-:1]) begin
            M_alu_comp_a = a + 1'h1;
          end
          io_led[8+7-:8] = alu[0+7-:8];
          io_led[16+7-:8] = alu[8+7-:8];
          io_led[0+0+0-:1] = M_alu_comp_z;
          io_led[0+1+0-:1] = M_alu_comp_v;
          io_led[0+2+0-:1] = M_alu_comp_n;
          if (alu == 16'h0e44) begin
            M_seg_values[15+4-:5] = 5'h11;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 3'h5;
            M_seg_values[0+4-:5] = 3'h5;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end else begin
            M_seg_values[15+4-:5] = 4'hc;
            M_seg_values[10+4-:5] = 4'ha;
            M_seg_values[5+4-:5] = 1'h1;
            M_seg_values[0+4-:5] = 4'hd;
            io_seg = ~M_seg_seg;
            io_sel = ~M_seg_sel;
          end
        end
        if (io_button[2+0-:1] || M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d = 1'h0;
          M_timera_d = 1'h0;
          M_timerb_d = 1'h0;
          M_state_d = SELECT_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_temp_a_q <= 1'h0;
      M_temp_b_q <= 1'h0;
      M_timera_q <= 1'h0;
      M_timerb_q <= 1'h0;
      M_timer_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_temp_a_q <= M_temp_a_d;
      M_temp_b_q <= M_temp_b_d;
      M_timera_q <= M_timera_d;
      M_timerb_q <= M_timerb_d;
      M_timer_q <= M_timer_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
