module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
      dff temp_a[16];
      dff temp_b[16];
      dff timera[30];
      dff timerb[30];
      dff timer[30];
    
      fsm state = {SELECT, MANUAL, TESTADD, TESTSUB1};
    
      multi_seven_seg seg;
    } 
  }
  
  sig a[16];
  sig b[16];
  sig alu[16];
  
  alu alu_comp;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    seg.values[3] = 4b0;
    seg.values[2] = 4b0;
    seg.values[1] = 4b0;
    seg.values[0] = 4b0;
    io_sel = ~4b0;
    alu_comp.alufn = 6b0;
    alu_comp.a = 16b0;
    alu_comp.b = 16b0;
    
    case(state.q){
      state.SELECT:
        seg.values[3] = 5;
        seg.values[2] = 14;
        seg.values[1] = 13;
        seg.values[0] = 31;
        io_seg = ~seg.seg;
        io_sel = ~seg.sel;
        
        if(io_dip[0][0]){
          if(io_button[1]){
            state.d = state.TESTADD;
          }
        } else {
          if(io_button[1]){
            state.d = state.MANUAL;
          }
        }
  
      state.MANUAL:                        //MANUAL MODE
        seg.values[3] = 30;
        seg.values[2] = 30;
        seg.values[1] = 30;
        seg.values[0] = 30;
        io_seg = ~seg.seg;
        io_sel = ~seg.sel;
        
        if(io_dip[0][1]){                  //store a
          a[7:0] = io_dip[1];
          a[15:8] = io_dip[2];
          if(io_button[1]){
            temp_a.d = a;
          }
        } else {                           //store b
          b[7:0] = io_dip[1];
          b[15:8] = io_dip[2];
          if(io_button[1]){
            temp_b.d = b;
          }
        }
          
        alu_comp.alufn = io_dip[0][7:2];
        alu_comp.a = temp_a.q;
        alu_comp.b = temp_b.q;
    
        io_led[1] = alu_comp.alu[7:0];
        io_led[2] = alu_comp.alu[15:8];
        io_led[0][0] = alu_comp.z;
        io_led[0][1] = alu_comp.v;
        io_led[0][2] = alu_comp.n;
        
        if(io_button[2]){
          state.d = state.SELECT;
        }
      
      state.TESTADD:                       //ADDITION TEST
        
        alu_comp.alufn = 6b0;              //alufn input
        a = 16b0101011110101010;           //a input
        alu_comp.a = a;
        b = 16b0010000100100100;           //b input
        alu_comp.b = b;
        alu = alu_comp.alu;                //alu output
        
        if(timera.q[29]){
          io_led[0][7] = 1;
          io_led[1] = b[7:0];
          io_led[2] = b[15:8];
          timerb.d =timerb.q + 1;
          seg.values[3] = 10;
          seg.values[2] = 11;
          seg.values[1] = 11;
          seg.values[0] = 31;
          io_seg = ~seg.seg;
          io_sel = ~seg.sel;
        } else {
        io_led[0][6] = 1;
          io_led[1] = a[7:0];
          io_led[2] = a[15:8];
          timera.d = timera.q + 1;
          seg.values[3] = 10;
          seg.values[2] = 11;
          seg.values[1] = 11;
          seg.values[0] = 31;
          io_seg = ~seg.seg;
          io_sel = ~seg.sel;
        }
        
        if(timerb.q[29]){
          io_led[0][7] = 0;
          timer.d = timer.q + 1;
          if(io_dip[0][7]){
            alu_comp.a = a + 1;
          }
          
          io_led[1] = alu[7:0];
          io_led[2] = alu[15:8];
          io_led[0][0] = alu_comp.z;
          io_led[0][1] = alu_comp.v;
          io_led[0][2] = alu_comp.n;
          
          if(alu == 16b0111100011001110){   //output checker
            seg.values[3] = 17;
            seg.values[2] = 10;
            seg.values[1] = 5;
            seg.values[0] = 5;
            io_seg = ~seg.seg;
            io_sel = ~seg.sel;
          } else {
            seg.values[3] = 12;
            seg.values[2] = 10;
            seg.values[1] = 1;
            seg.values[0] = 13;
            io_seg = ~seg.seg;
            io_sel = ~seg.sel;
            
          }
        }
        
        if(io_button[3]){
          timer.d = 30b0;
          timera.d = 30b0;
          timerb.d = 30b0;
          state.d = state.SELECT;                    //prev state
        }
        if(io_button[4] | timer.q[29] == 1){
          timer.d = 30b0;
          timera.d = 30b0;
          timerb.d = 30b0;
          state.d = state.TESTSUB1;                  //next state
        }
        if(io_button[2]){
          timer.d = 30b0;
          timera.d = 30b0;
          timerb.d = 30b0;
          state.d = state.SELECT;                    //reset state to SELECT
        }

      state.TESTSUB1:                      //SUBTRACTION TEST

        alu_comp.alufn = 6b000001;         //alufn input
        a = 16b1100000000110000;           //a input
        alu_comp.a = a;
        b = 16b0000110010001011;           //b input
        alu_comp.b = b;
        alu = alu_comp.alu;                //alu output
        
        if(timera.q[29] & ~(timer.q)){
          io_led[0][7] = 1;
          io_led[1] = b[7:0];
          io_led[2] = b[15:8];
          timerb.d =timerb.q + 1;
          seg.values[3] = 5;
          seg.values[2] = 15;
          seg.values[1] = 16;
          seg.values[0] = 1;
          io_seg = ~seg.seg;
          io_sel = ~seg.sel;
        } else {
        io_led[0][6] =1;
          io_led[1] = a[7:0];
          io_led[2] = a[15:8];
          timera.d = timera.q + 1;
          seg.values[3] = 5;
          seg.values[2] = 15;
          seg.values[1] = 16;
          seg.values[0] = 1;
          io_seg = ~seg.seg;
          io_sel = ~seg.sel;
        }
        
        if(timerb.q[29]){
          io_led[0][7] = 0;
          timer.d = timer.q + 1;
          if(io_dip[0][7]){
            alu_comp.a = a + 1;
          }
          
          io_led[1] = alu[7:0];
          io_led[2] = alu[15:8];
          io_led[0][0] = alu_comp.z;
          io_led[0][1] = alu_comp.v;
          io_led[0][2] = alu_comp.n;
          
          if(alu == 16b1011001110100101 & alu_comp.n == 1){   //output checker
            seg.values[3] = 17;
            seg.values[2] = 10;
            seg.values[1] = 5;
            seg.values[0] = 5;
            io_seg = ~seg.seg;
            io_sel = ~seg.sel;
          } else {
            seg.values[3] = 12;
            seg.values[2] = 10;
            seg.values[1] = 1;
            seg.values[0] = 13;
            io_seg = ~seg.seg;
            io_sel = ~seg.sel;
          }
        }
        
        if(io_button[3]){
          timer.d = 30b0;
          timera.d = 30b0;
          timerb.d = 30b0;
          state.d = state.TESTADD;                    //prev state
        }
        if(io_button[4] | timer.q[29] == 1){
          timer.d = 30b0;
          timera.d = 30b0;
          timerb.d = 30b0;
          state.d = state.SELECT;                  //next state
        }
        if(io_button[2]){
          timer.d = 30b0;
          timera.d = 30b0;
          timerb.d = 30b0;
          state.d = state.SELECT;                    //reset state to SELECT
        }
        
   }
}